package com.zhongan.icare.message.im.service.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.zhongan.health.common.utils.exception.BusinessException;
import com.zhongan.icare.message.im.service.ImService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.math.RandomUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import javax.annotation.Resource;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Created by za-raozhikun on 2017/8/14.
 */
@Slf4j
@Service
public class ImServiceImpl implements ImService {

    private static final String IM_STATIC_PARAMS_URL = "?usersig={usersig}&identifier={identifier}&sdkappid={sdkappid}&random={random}&contenttype=json";

    @Value("${icare.im.sdk.url:https://console.tim.qq.com/v4/}")
    private String baseUrl;

    @Resource
    private RestTemplate restTemplate;

    private ConcurrentHashMap<String, String> urlMap = new ConcurrentHashMap<>();

    @Override
    public JSONObject invoke(String path, String userSig, String identifier, long sdkAppId, Object request) {
        String url = urlMap.get(path);
        if (StringUtils.isEmpty(url)) {
            url = baseUrl + path + IM_STATIC_PARAMS_URL;
            urlMap.put(path, url);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        String requestJson = JSON.toJSONString(request);
        HttpEntity<String> entity = new HttpEntity<>(requestJson, headers);
        ResponseEntity<String> responseEntity = restTemplate.postForEntity(url, entity, String.class, userSig, identifier, sdkAppId, RandomUtils.nextLong());
        String ret = responseEntity.getBody();
        if (responseEntity.getStatusCode().is2xxSuccessful()) {
            return JSON.parseObject(ret);
        } else {
            log.warn("Im Invoke Failed : method={}, request={}, responseCode={}, responseBody={}", path, requestJson, responseEntity.getStatusCode().value(), ret);
            throw new BusinessException("invoke im failed");
        }
    }
}
