package com.zhongan.icare.message.push.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.baidu.yun.push.client.BaiduPushClient;
import com.baidu.yun.push.exception.PushClientException;
import com.baidu.yun.push.exception.PushServerException;
import com.baidu.yun.push.model.*;
import com.google.gson.Gson;
import com.sun.jmx.snmp.Timestamp;
import com.zhongan.icare.message.push.constants.ConstantsDataKey;
import com.zhongan.icare.message.push.dao.dataobject.MsgPushDO;
import com.zhongan.icare.message.push.enums.BaiduMessageTypeEnum;
import com.zhongan.icare.message.push.enums.PushDefaultValueEnum;
import com.zhongan.icare.message.push.msg.PushMessageDO;
import com.zhongan.icare.message.push.service.IPushBaiduService;
import com.zhongan.icare.message.push.service.IPushSendLogService;
import com.zhongan.icare.message.push.util.BaiduPushClientUtils;
import com.zhongan.icare.share.message.dto.PushBaiduChannelDTO;
import com.zhongan.icare.share.message.dto.PushSendLogDTO;
import com.zhongan.icare.share.message.enm.BaiduDeviceTypeEnum;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;

@Service
//@RestController
//@RequestMapping(value = "/v2/test")
@Slf4j
public class PushBaiduServiceImpl implements IPushBaiduService
{

    @Autowired
    private ExecutorService pool;

    @Value("${msg.ios.status}")
    private int DEPOLYSTATUS;

    @Resource
    private IPushSendLogService pushSendLogService;

    @Resource
    private BaiduPushClientUtils baiduPushClientUtils;

    /**
     * 给单个人推送消息
     *
     * @param baiduChannelDTO
     * @param contextMap
     * @return
     */
    @Override
    public boolean pushMsgToSingleDevice(final PushBaiduChannelDTO baiduChannelDTO, final Map<String, Object> contextMap)
    {
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                Map<String, Object> allMap = new HashMap<String, Object>();
                if (baiduChannelDTO.getDeviceType().intValue() == BaiduDeviceTypeEnum.ANDROID.getCode())
                {
                    allMap.put(ConstantsDataKey.ANDROID_TITLE, contextMap.get(ConstantsDataKey.DATA_KEY_TITLE));
                    allMap.put(ConstantsDataKey.ANDROID_DESCRIPTION, contextMap.get(ConstantsDataKey.DATA_KEY_DESCRIPTION));
                    allMap.put(ConstantsDataKey.ANDROID_NOTIFICATION_BUILDER_ID, Integer.parseInt(PushDefaultValueEnum.ANDROID_NOTIFICATION_BUILDER_ID_0.getValue()));
//                    allMap.put(ConstantsDataKey.ANDROID_CUSTOM_CONTENT,contextMap.get(ConstantsDataKey.ANDROID_CUSTOM_CONTENT));
                    contextMap.put(ConstantsDataKey.DATA_MAP_IOS_ANDROID, allMap);
                    pushAndroidSingleDeviceMsg(baiduChannelDTO, contextMap);
                } else if (baiduChannelDTO.getDeviceType().intValue() == BaiduDeviceTypeEnum.IOS.getCode())
                {
                    Map<String, String> aps = new HashMap<String, String>();
                    aps.put(ConstantsDataKey.IOS_ALERT, contextMap.get(ConstantsDataKey.DATA_KEY_TITLE).toString());
                    aps.put(ConstantsDataKey.IOS_SOUND, PushDefaultValueEnum.IOS_SOUND_DEFAULT.getValue());
                    allMap.put(ConstantsDataKey.IOS_APS, aps);
//                    allMap.putAll((Map)contextMap.get(ConstantsDataKey.ANDROID_CUSTOM_CONTENT));
                    contextMap.put(ConstantsDataKey.DATA_MAP_IOS_ANDROID, allMap);
                    pushIOSSingleDeviceMsg(baiduChannelDTO, contextMap);
                }
            }
        });

        return false;
    }

    /**
     * 向Android设备推送单个消息
     */
    private boolean pushAndroidSingleDeviceMsg(PushBaiduChannelDTO baiduChannelDTO, Map<String, Object> contextMap)
    {
        try
        {
            PushMsgToSingleDeviceRequest request = new PushMsgToSingleDeviceRequest().addChannelId(baiduChannelDTO.getChannelId())
                    .addMessageType(Integer.parseInt(contextMap.get(ConstantsDataKey.REQUEST_MESSAGE_TYPE).toString())). //设置消息类型,0表示透传消息,1表示通知,默认为0.
                    addMessage(new Gson().toJson(contextMap.get(ConstantsDataKey.DATA_MAP_IOS_ANDROID))).addDeviceType(BaiduDeviceTypeEnum.ANDROID.getCode());
            PushMsgToSingleDeviceResponse response = baiduPushClientUtils.loadAndroidPushClient().pushMsgToSingleDevice(request);
            // 保存发送消息
            saveSendLog(baiduChannelDTO, response.getMsgId(), response.getSendTime(), contextMap);
            log.info("msgId : {},sendTime : {}", response.getMsgId(), response.getSendTime());
            return true;
        } catch (PushClientException | PushServerException e)
        {
            log.error("百度消息android个人推送异常:{}", e.getMessage());
        }

        return false;
    }

    /**
     * 保存百度推送的消息
     *
     * @param baiduChannelDTO
     * @param contextMap
     */
    private void saveSendLog(PushBaiduChannelDTO baiduChannelDTO, String msgId, Long sendTime, Map<String, Object> contextMap)
    {
        PushSendLogDTO logDTO = new PushSendLogDTO();
        logDTO.setBaiduChannel(baiduChannelDTO.getChannelId());
        logDTO.setBaiduMsgid(msgId);
        logDTO.setDeviceType(baiduChannelDTO.getDeviceType());
        logDTO.setMessageContent(JSONObject.toJSONString(contextMap.get(ConstantsDataKey.DATA_MAP_IOS_ANDROID)));
        logDTO.setRequestLogId(Long.parseLong(contextMap.get(ConstantsDataKey.REQUEST_LOG_ID).toString()));
        logDTO.setSendTime(new Timestamp(sendTime).getDate());
        pushSendLogService.insert(logDTO);
    }

    /**
     * 像ios设备推送单个消息
     */
    private boolean pushIOSSingleDeviceMsg(PushBaiduChannelDTO baiduChannelDTO, Map<String, Object> contextMap)
    {
        try
        {
            PushMsgToSingleDeviceRequest request = new PushMsgToSingleDeviceRequest().addChannelId(baiduChannelDTO.getChannelId())
                    .addMessageType(Integer.parseInt(contextMap.get(ConstantsDataKey.REQUEST_MESSAGE_TYPE).toString())).addDeployStatus(DEPOLYSTATUS). //设置消息类型,0表示透传消息,1表示通知,默认为0.
                    addMessage(new Gson().toJson(contextMap.get(ConstantsDataKey.DATA_MAP_IOS_ANDROID))).addDeviceType(BaiduDeviceTypeEnum.IOS.getCode());
            PushMsgToSingleDeviceResponse response = baiduPushClientUtils.loadIosPushClient().pushMsgToSingleDevice(request);
            // 保存发送消息
            saveSendLog(baiduChannelDTO, response.getMsgId(), response.getSendTime(), contextMap);
            log.info("msgId : {},sendTime : {}", response.getMsgId(), response.getSendTime());
            return true;
        } catch (PushClientException | PushServerException e)
        {
            log.error("百度消息ios个人推送异常:{}", e.getMessage());
        }

        return false;
    }

    @Override
    public void pushMsgToAll(final Map<String, Object> contextMap)
    {
        final PushMessageDO pushMessageDO = createPushMsg(contextMap);
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                pushAllAndroidMsg(pushMessageDO, contextMap);
            }
        });
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                pushAllIosMsg(pushMessageDO, contextMap);
            }

        });
    }

    /**
     * 向所有Android设备推送消息
     */
    private void pushAllAndroidMsg(PushMessageDO pushMessageDO, Map<String, Object> contextMap)
    {
//        try {
//            // 4. specify request arguments
//            PushMsgToAllRequest request = new PushMsgToAllRequest().addMsgExpires(new Integer(3600))
//                    .addMessageType(Integer.parseInt(contextMap.get(ConstantsDataKey.REQUEST_MESSAGE_TYPE).toString())).addMessage(new Gson().toJson(pushMessageDO))
//                    // 设置定时推送时间，必需超过当前时间一分钟，单位秒.实例70秒后推送
//                    .addSendTime(System.currentTimeMillis() / 1000 + 70)
//                    .addDeviceType(BaiduDeviceTypeEnum.ANDROID.getCode());
//            // 5. http request
//            PushMsgToAllResponse response = baiduPushClientUtils.loadAndroidPushClient().pushMsgToAll(request);
//            PushMsgToAllResponse response = baiduPushClientUtils.loadAndroidPushClient().pushMsgToAll(request);
//            // 保存发送消息
//            PushBaiduChannelDTO baiduChannelDTO = new PushBaiduChannelDTO();
//            baiduChannelDTO.setChannelId(ConstantsDataKey.BAIDU_CHANNEL_2_ALL);
//            baiduChannelDTO.setDeviceType(ConstantsDataKey.DEVICE_TYPE_2_ALL);
//            saveSendLog(baiduChannelDTO,response.getMsgId(),response.getSendTime(),pushMessageDO,contextMap);
//            // Http请求返回值解析
//            log.info("msgId : {},sendTime : {},timerId : {}", response.getMsgId(), response.getSendTime(),
//                    response.getTimerId());
//        } catch (PushClientException e) {
//            log.error("百度消息群推送异常:{}", e);
//        } catch (PushServerException e) {
//            log.error("百度消息群推送异常,requestId: {},errorCode: {},errorMsg: {}", e.getRequestId(), e.getErrorCode(),
//                    e.getErrorMsg());
//
//        }

    }

    /**
     * 向所有Ios设备推送消息
     */
    private void pushAllIosMsg(PushMessageDO pushMessageDO, Map<String, Object> contextMap)
    {
        try
        {
            // 4. specify request arguments
            PushMsgToAllRequest request = new PushMsgToAllRequest().addMsgExpires(new Integer(3600))
                    .addMessageType(Integer.parseInt(contextMap.get(ConstantsDataKey.REQUEST_MESSAGE_TYPE).toString())).addDepolyStatus(DEPOLYSTATUS)
                    .addMessage(new Gson().toJson(pushMessageDO))
                    // 设置定时推送时间，必需超过当前时间一分钟，单位秒.实例70秒后推送
                    .addSendTime(System.currentTimeMillis() / 1000 + 70)
                    .addDeviceType(BaiduDeviceTypeEnum.IOS.getCode());
            // 5. http request
            PushMsgToAllResponse response = baiduPushClientUtils.loadIosPushClient().pushMsgToAll(request);
            // Http请求返回值解析
            log.info("msgId : {},sendTime : {},timerId : {}", response.getMsgId(), response.getSendTime(),
                    response.getTimerId());
        } catch (PushClientException e)
        {
            log.error("百度消息群推送异常:{}", e);
        } catch (PushServerException e)
        {
            log.error("百度消息群推送异常,requestId: {},errorCode: {},errorMsg: {}", e.getRequestId(), e.getErrorCode(),
                    e.getErrorMsg());

        }
    }

    /**
     * 使用指定标签推送消息
     */
    @Override
    public void pushMsgByTag(MsgPushDO msgPush, final String tagName)
    {
        final PushMessageDO message = createPushMsg(msgPush);
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                pushAndroidMsgByTag(tagName, message);
            }
        });
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                PushIosMsgByTag(tagName, message);
            }
        });
    }

    /**
     * 向指定标签的所有Android设备推送消息
     */

    private void pushAndroidMsgByTag(String tagName, PushMessageDO pushMessageDO)
    {
        try
        {
            // 4. specify request arguments
            // pushTagTpye = 1 for common tag pushing
            PushMsgToTagRequest request = new PushMsgToTagRequest().addTagName(tagName)
                    .addMsgExpires(new Integer(3600)).addMessageType(BaiduMessageTypeEnum.INFORM.getCode())
                    // .addSendTime(System.currentTimeMillis() / 1000 + 70).
                    .addMessage(new Gson().toJson(pushMessageDO)).addDeviceType(BaiduDeviceTypeEnum.ANDROID.getCode());
            // 5. http request
            PushMsgToTagResponse response = baiduPushClientUtils.loadAndroidPushClient().pushMsgToTag(request);
            // Http请求返回值解析
            log.info("msgId : {},sendTime : {},timerId : {}", response.getMsgId(), response.getSendTime(),
                    response.getTimerId());
        } catch (PushClientException e)
        {
            log.error("百度消息标签推送异常: tagName: {},{}", tagName, e);
        } catch (PushServerException e)
        {
            log.error("百度消息标签推送异常: tagName: {},requestId: {},errorCode: {},errorMsg: {}", tagName, e.getRequestId(),
                    e.getErrorCode(), e.getErrorMsg());
        }

    }

    /**
     * 向指定标签的所有ios设备推送消息
     */
    private void PushIosMsgByTag(String tagName, PushMessageDO pushMessageDO)
    {
        try
        {
            // 4. specify request arguments
            // pushTagTpye = 1 for common tag pushing
            PushMsgToTagRequest request = new PushMsgToTagRequest().addTagName(tagName)
                    .addMsgExpires(new Integer(3600)).addMessageType(BaiduMessageTypeEnum.INFORM.getCode())
                    .addDeployStatus(DEPOLYSTATUS)
                    // .addSendTime(System.currentTimeMillis() / 1000 + 70).
                    .addMessage(new Gson().toJson(pushMessageDO)).addDeviceType(BaiduDeviceTypeEnum.IOS.getCode());
            // 5. http request
            PushMsgToTagResponse response = baiduPushClientUtils.loadIosPushClient().pushMsgToTag(request);
            // Http请求返回值解析
            log.info("msgId : {},sendTime : {},timerId : {}", response.getMsgId(), response.getSendTime(),
                    response.getTimerId());
        } catch (PushClientException e)
        {
            log.error("百度消息标签推送异常: tagName: {},{}", tagName, e);
        } catch (PushServerException e)
        {
            log.error("百度消息标签推送异常: tagName: {},requestId: {},errorCode: {},errorMsg: {}", tagName, e.getRequestId(),
                    e.getErrorCode(), e.getErrorMsg());
        }
    }

    /**
     * 根据指定标签名创建标签,0表示创建成功，1表示失败
     */
    @Override
    @RequestMapping(value = "/createTage", method = {RequestMethod.GET, RequestMethod.POST})
    public int createBaiduTag(@RequestParam final String tagName)
    {
        final Integer result = 1;
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {

                    int androidResult = createAndroidTag(tagName);
                    int iosResult = createIOSTag(tagName);
                    if (androidResult == 1 && iosResult == 1)
                    {
                        result.valueOf(0);
                    }
                } catch (Exception e)
                {
                    log.error("", e);
                }

            }

        });

        return result;
    }

    @RequestMapping(value = "/pushByTag", method = {RequestMethod.GET, RequestMethod.POST})
    public void pushByTag(@RequestParam String title, @RequestParam String detail)
    {
        MsgPushDO msgPush = new MsgPushDO();
        msgPush.setMessageTitle(title);
        msgPush.setMessageDetail(detail);
        this.pushMsgByTag(msgPush, "test");
    }

    @RequestMapping(value = "/addDevice", method = {RequestMethod.GET, RequestMethod.POST})
    public void addDevice(String channelId)
    {
        this.addDeviceToTag(new String[]{channelId}, "test", 3);
    }

    @Override
    public int deleteBaiduTag(final String tagName)
    {
        final Integer androidResult = 1;
        final Integer iosResult = 1;
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    // 4. specify request arguments
                    DeleteTagRequest request = new DeleteTagRequest().addTagName(tagName).addDeviceType(
                            Integer.valueOf(BaiduDeviceTypeEnum.ANDROID.getCode()));
                    // 5. http request
                    DeleteTagResponse response = baiduPushClientUtils.loadAndroidPushClient().deleteTag(request);
                    androidResult.valueOf(response.getResult());
                    log.info("请求删除Android 标签: {},删除结果: {}", response.getTagName(), response.getResult());
                } catch (PushClientException e)
                {
                    log.error("删除Android标签失败:", e);
                } catch (PushServerException e)
                {
                    log.error("删除Android标签 requestId : {},errorCode : {}, errorMsg : {}", e.getRequestId(),
                            e.getErrorCode(), e.getErrorMsg());
                }
            }

        });
        pool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    // 4. specify request arguments
                    DeleteTagRequest request = new DeleteTagRequest().addTagName(tagName).addDeviceType(
                            Integer.valueOf(BaiduDeviceTypeEnum.IOS.getCode()));
                    // 5. http request
                    DeleteTagResponse response = baiduPushClientUtils.loadIosPushClient().deleteTag(request);
                    iosResult.valueOf(response.getResult());
                    log.info("请求删除Ios 标签: {},删除结果: {}", response.getTagName(), response.getResult());
                } catch (PushClientException e)
                {
                    log.error("删除Ios标签失败:", e);
                } catch (PushServerException e)
                {
                    log.error("删除ios标签失败 requestId : {},errorCode : {}, errorMsg : {}", e.getRequestId(),
                            e.getErrorCode(), e.getErrorMsg());
                }
            }

        });

        if (androidResult == 0 && iosResult == 0)
        {
            return 0;
        }
        return 1;
    }

    /**
     * 向指定标签中添加设备，数组长度最大值为10
     */
    @Override
    public void addDeviceToTag(String[] channelIds, String tagName, int deviceType)
    {

        try
        {
            BaiduPushClient pushClient = null;
            if (BaiduDeviceTypeEnum.ANDROID.getCode() == deviceType)
            {
                pushClient = baiduPushClientUtils.loadAndroidPushClient();
            } else
            {
                pushClient = baiduPushClientUtils.loadIosPushClient();
            }

            AddDevicesToTagRequest request = new AddDevicesToTagRequest().addTagName(tagName).addChannelIds(channelIds)
                    .addDeviceType(deviceType);

            // 5. http request
            AddDevicesToTagResponse response = pushClient.addDevicesToTag(request);
            // Http请求返回值解析
            if (null != response)
            {
                StringBuilder strBuilder = new StringBuilder();
                strBuilder.append("devicesInTag：{");
                List<?> devicesInfo = response.getDevicesInfoAfterAdded();
                for (int i = 0; i < devicesInfo.size(); i++)
                {
                    Object object = devicesInfo.get(i);
                    if (i != 0)
                    {
                        strBuilder.append(",");
                    }
                    if (object instanceof DeviceInfo)
                    {
                        DeviceInfo deviceInfo = (DeviceInfo) object;
                        strBuilder.append("{channelId:" + deviceInfo.getChannelId() + ",result:"
                                + deviceInfo.getResult() + "}");
                    }
                }
                strBuilder.append("}");
                log.info("设备添加结果 : {}", strBuilder.toString());
            }
        } catch (PushClientException e)
        {
            log.error("添加设备失败: ", e);
        } catch (PushServerException e)
        {
            log.error("添加设备失败 requestId : {},errorCode : {}, errorMsg : {}", e.getRequestId(), e.getErrorCode(),
                    e.getErrorMsg());

        }

    }

    /**
     * 向指定的标签中删除设备，数组长度最大为10
     */
    @Override
    public void deleteDeviceFromTag(final String[] channelIds, final String tagName, final int deviceType)
    {

        try
        {
            BaiduPushClient pushClient = null;
            if (BaiduDeviceTypeEnum.ANDROID.getCode() == deviceType)
            {
                pushClient = baiduPushClientUtils.loadAndroidPushClient();
            } else
            {
                pushClient = baiduPushClientUtils.loadIosPushClient();
            }
            DeleteDevicesFromTagRequest request = new DeleteDevicesFromTagRequest().addTagName(tagName)
                    .addChannelIds(channelIds).addDeviceType(deviceType);
            // 5. http request
            DeleteDevicesFromTagResponse response = pushClient.deleteDevicesFromTag(request);
            // Http请求返回值解析
            if (null != response)
            {
                StringBuilder strBuilder = new StringBuilder();
                strBuilder.append("devicesInfoAfterDel:{");
                List<?> list = response.getDevicesInfoAfterDel();
                for (int i = 0; i < list.size(); i++)
                {
                    if (i != 0)
                    {
                        strBuilder.append(",");
                    }
                    Object object = list.get(i);
                    if (object instanceof DeviceInfo)
                    {
                        DeviceInfo deviceInfo = (DeviceInfo) object;
                        strBuilder.append("{channelId: " + deviceInfo.getChannelId() + ", result: "
                                + deviceInfo.getResult() + "}");
                    }
                }
                strBuilder.append("}");
                log.info("删除标签结果: {}", strBuilder.toString());
            }
        } catch (PushClientException e)
        {
            log.error("删除标签异常", e);
        } catch (PushServerException e)
        {
            log.error("删除标签异常 requestId : {},errorCode : {}, errorMsg : {}", e.getRequestId(), e.getErrorCode(),
                    e.getErrorMsg());
        }

    }

    /**
     * @param tagName
     * @return 0表示创建成功，1表示创建失败
     */
    private int createAndroidTag(String tagName)
    {
        try
        {
            // 4. specify request arguments
            CreateTagRequest request = new CreateTagRequest().addTagName(tagName).addDeviceType(
                    BaiduDeviceTypeEnum.ANDROID.getCode());
            // 5. http request
            CreateTagResponse response = baiduPushClientUtils.loadAndroidPushClient().createTag(request);
            log.info("create android tagName : {},result : {}", response.getTagName(), response.getResult());
            return response.getResult();
        } catch (PushClientException e)
        {
            log.error("创建Android标签失败:{}", e);
        } catch (PushServerException e)
        {
            log.error("创建Android标签失败,requestId: {},errorCode: {},errorMsg: {}", e.getRequestId(), e.getErrorCode(),
                    e.getErrorMsg());
        }
        return 1;
    }

    /**
     * @param tagName
     * @return 0表示创建成功，1表示创建失败
     */
    private int createIOSTag(String tagName)
    {
        try
        {
            // 4. specify request arguments
            CreateTagRequest request = new CreateTagRequest().addTagName(tagName).addDeviceType(
                    BaiduDeviceTypeEnum.IOS.getCode());
            // 5. http request
            CreateTagResponse response = baiduPushClientUtils.loadIosPushClient().createTag(request);
            log.info("create android tagName : {},result : {}", response.getTagName(), response.getResult());
            return response.getResult();
        } catch (PushClientException e)
        {
            log.error("创建IOS标签失败:{}", e);
        } catch (PushServerException e)
        {
            log.error("创建IOS标签失败,requestId: {},errorCode: {},errorMsg: {}", e.getRequestId(), e.getErrorCode(),
                    e.getErrorMsg());
        }
        return 1;
    }

    private PushMessageDO createPushMsg(Map<String, Object> contextMap)
    {
        PushMessageDO message = new PushMessageDO();
        message.setTitle(contextMap.get(ConstantsDataKey.DATA_KEY_TITLE).toString());
        message.setDescription(contextMap.get(ConstantsDataKey.DATA_KEY_DESCRIPTION).toString());
        message.setNotification_builder_id("0");
        Map<String, String> aps = new HashMap<String, String>();
        aps.put("alert", contextMap.get(ConstantsDataKey.DATA_KEY_TITLE).toString());
        aps.put("sound", "default");
        return message;
    }

    private PushMessageDO createPushMsg(MsgPushDO msgPush)
    {
        PushMessageDO message = new PushMessageDO();
        message.setTitle(msgPush.getMessageTitle());
        message.setDescription(msgPush.getMessageDetail());
        message.setNotification_builder_id("0");
        Map<String, String> aps = new HashMap<String, String>();
        aps.put("alert", msgPush.getMessageTitle());
        aps.put("sound", "default");
        return message;
    }

}
