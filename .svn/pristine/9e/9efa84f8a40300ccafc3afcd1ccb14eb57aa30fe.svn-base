package com.zhongan.icare.message.push.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.baidu.yun.push.exception.PushClientException;
import com.baidu.yun.push.exception.PushServerException;
import com.baidu.yun.push.model.PushMsgToSingleDeviceRequest;
import com.baidu.yun.push.model.PushMsgToSingleDeviceResponse;
import com.sun.jmx.snmp.Timestamp;
import com.zhongan.health.common.utils.StringUtils;
import com.zhongan.icare.message.push.constants.ConstantsDataKey;
import com.zhongan.icare.message.push.enums.PushDefaultValueEnum;
import com.zhongan.icare.message.push.util.BaiduPushClientUtils;
import com.zhongan.icare.share.message.dto.PushBaiduChannelDTO;
import com.zhongan.icare.share.message.dto.PushSendLogDTO;
import com.zhongan.icare.share.message.enm.BaiduDeviceTypeEnum;
import com.zhongan.icare.share.message.service.IPushBaiduService;
import com.zhongan.icare.share.message.service.IPushSendLogService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;

@Service
@RestController
@RequestMapping(value = "/v2/baiduSerive")
@Slf4j
public class PushBaiduServiceImpl implements IPushBaiduService
{

    @Autowired
    private ExecutorService threadPool;

    @Value("${msg.ios.status}")
    private int DEPOLYSTATUS;

    @Resource
    private IPushSendLogService pushSendLogService;

    @Resource
    private BaiduPushClientUtils baiduPushClientUtils;

    /**
     * 给单个人推送消息
     *
     * @param baiduChannelDTO
     * @param contextMap
     * @return
     */
    @Override
    public boolean pushMsgToSingleDevice(final PushBaiduChannelDTO baiduChannelDTO, final Map<String, Object> contextMap)
    {
        threadPool.execute(new Runnable()
        {
            @Override
            public void run()
            {
                Map<String, Object> allMap = new HashMap<String, Object>();
                Object titleObj = contextMap.get(ConstantsDataKey.DATA_KEY_TITLE);
                String title = null;
                if (titleObj == null || StringUtils.isBlank(titleObj.toString()))
                {
                    title = "最福利";
                } else title = titleObj.toString();
                Object customContentObj = contextMap.get(ConstantsDataKey.ANDROID_CUSTOM_CONTENT);
                if (baiduChannelDTO.getDeviceType().intValue() == BaiduDeviceTypeEnum.ANDROID.getCode())
                {
                    allMap.put(ConstantsDataKey.ANDROID_TITLE, title);
                    Object descriptionObj = contextMap.get(ConstantsDataKey.DATA_KEY_DESCRIPTION);
                    if (descriptionObj == null || StringUtils.isBlank(descriptionObj.toString()))
                    {
                        descriptionObj = title;
                    }
                    allMap.put(ConstantsDataKey.ANDROID_DESCRIPTION, descriptionObj.toString());
                    allMap.put(ConstantsDataKey.ANDROID_NOTIFICATION_BUILDER_ID, Integer.parseInt(PushDefaultValueEnum.ANDROID_NOTIFICATION_BUILDER_ID_0.getValue()));
                    Object basicTypeObj = contextMap.get(ConstantsDataKey.ANDROID_NOTIFICATION_BASIC_STYLE);
                    if (basicTypeObj != null)
                    {
                        allMap.put(ConstantsDataKey.ANDROID_NOTIFICATION_BASIC_STYLE, Integer.parseInt(basicTypeObj.toString())); // 目前为7
                    }
                    Object openType = contextMap.get(ConstantsDataKey.ANDROID_OPEN_TYPE);
                    if (openType != null)
                    {
                        allMap.put(ConstantsDataKey.ANDROID_OPEN_TYPE, Integer.parseInt(openType.toString()));// 目前为0
                    }
                    Object url = contextMap.get(ConstantsDataKey.ANDROID_URL);
                    if (url != null && !StringUtils.isBlank(url.toString()))
                    {
                        allMap.put(ConstantsDataKey.ANDROID_URL, url.toString());
                    }
                    Object pkgContent = contextMap.get(ConstantsDataKey.ANDROID_PKG_CONTENT);
                    if (pkgContent != null && !StringUtils.isBlank(pkgContent.toString()))
                    {
                        allMap.put(ConstantsDataKey.ANDROID_PKG_CONTENT, pkgContent.toString());
                    }
                    if (customContentObj != null)
                        allMap.put(ConstantsDataKey.ANDROID_CUSTOM_CONTENT, (Map) customContentObj);
                    contextMap.put(ConstantsDataKey.DATA_MAP_IOS_ANDROID, allMap);
                    pushAndroidSingleDeviceMsg(baiduChannelDTO, contextMap);
                } else if (baiduChannelDTO.getDeviceType().intValue() == BaiduDeviceTypeEnum.IOS.getCode())
                {
                    Map<String, Object> aps = new HashMap<String, Object>();
                    aps.put(ConstantsDataKey.IOS_ALERT, title);
                    aps.put(ConstantsDataKey.IOS_SOUND, PushDefaultValueEnum.IOS_SOUND_DEFAULT.getValue());
                    aps.put(ConstantsDataKey.IOS_CONTENT_AVAILABLE, 1);
                    Object badge = contextMap.get(ConstantsDataKey.IOS_BADGE);
                    if (badge != null) aps.put(ConstantsDataKey.IOS_BADGE, badge);
                    allMap.put(ConstantsDataKey.IOS_APS, aps);
                    if (customContentObj != null) allMap.putAll((Map) customContentObj);
                    contextMap.put(ConstantsDataKey.DATA_MAP_IOS_ANDROID, allMap);
                    pushIOSSingleDeviceMsg(baiduChannelDTO, contextMap);
                }
            }
        });

        return false;
    }

    /**
     * 向Android设备推送单个消息
     */
    private boolean pushAndroidSingleDeviceMsg(PushBaiduChannelDTO baiduChannelDTO, Map<String, Object> contextMap)
    {
        try
        {
            PushMsgToSingleDeviceRequest request = new PushMsgToSingleDeviceRequest().addChannelId(baiduChannelDTO.getChannelId())
                    .addMessageType(Integer.parseInt(contextMap.get(ConstantsDataKey.REQUEST_MESSAGE_TYPE).toString())). //设置消息类型,0表示透传消息,1表示通知,默认为0.
                    addMessage(JSONObject.toJSONString(contextMap.get(ConstantsDataKey.DATA_MAP_IOS_ANDROID))).addDeviceType(BaiduDeviceTypeEnum.ANDROID.getCode());
            PushMsgToSingleDeviceResponse response = baiduPushClientUtils.loadAndroidPushClient().pushMsgToSingleDevice(request);
            // 保存发送消息
            saveSendLog(baiduChannelDTO, response.getMsgId(), response.getSendTime(), contextMap);
            log.info("msgId : {},sendTime : {}", response.getMsgId(), response.getSendTime());
            return true;
        } catch (PushClientException ce)
        {
            log.error("百度消息android个人推送异常PushClientException:{},exception:{}", ce.getMessage(), ce);
        } catch (PushServerException se)
        {
            log.error("百度消息android个人推送异常PushServerException:{},exception:{}", se.getMessage(), se);
        }

        return false;
    }

    /**
     * 保存百度推送的消息
     *
     * @param baiduChannelDTO
     * @param contextMap
     */
    private void saveSendLog(PushBaiduChannelDTO baiduChannelDTO, String msgId, Long sendTime, Map<String, Object> contextMap)
    {
        PushSendLogDTO logDTO = new PushSendLogDTO();
        logDTO.setBaiduChannel(baiduChannelDTO.getChannelId());
        logDTO.setBaiduMsgid(msgId);
        logDTO.setDeviceType(baiduChannelDTO.getDeviceType());
        logDTO.setMessageContent(JSONObject.toJSONString(contextMap.get(ConstantsDataKey.DATA_MAP_IOS_ANDROID)));
        if (contextMap.get(ConstantsDataKey.REQUEST_LOG_ID) != null)
        {
            logDTO.setRequestLogId(Long.parseLong(contextMap.get(ConstantsDataKey.REQUEST_LOG_ID).toString()));
        }
        logDTO.setSendTime(new Timestamp(sendTime).getDate());
        pushSendLogService.insert(logDTO);
    }

    /**
     * 像ios设备推送单个消息
     */
    private boolean pushIOSSingleDeviceMsg(PushBaiduChannelDTO baiduChannelDTO, Map<String, Object> contextMap)
    {
        try
        {
            PushMsgToSingleDeviceRequest request = new PushMsgToSingleDeviceRequest().addChannelId(baiduChannelDTO.getChannelId())
                    .addMessageType(Integer.parseInt(contextMap.get(ConstantsDataKey.REQUEST_MESSAGE_TYPE).toString())).addDeployStatus(DEPOLYSTATUS). //设置消息类型,0表示透传消息,1表示通知,默认为0.
                    addMessage(JSONObject.toJSONString(contextMap.get(ConstantsDataKey.DATA_MAP_IOS_ANDROID))).addDeviceType(BaiduDeviceTypeEnum.IOS.getCode());
            PushMsgToSingleDeviceResponse response = baiduPushClientUtils.loadIosPushClient().pushMsgToSingleDevice(request);
            // 保存发送消息
            saveSendLog(baiduChannelDTO, response.getMsgId(), response.getSendTime(), contextMap);
            log.info("msgId : {},sendTime : {}", response.getMsgId(), response.getSendTime());
            return true;
        } catch (PushClientException ce)
        {
            log.error("百度消息IOS个人推送异常PushClientException:{},exception:{}", ce.getMessage(), ce);
        } catch (PushServerException se)
        {
            log.error("百度消息IOS个人推送异常PushServerException:{},exception:{}", se.getMessage(), se);
        }

        return false;
    }


}
