package com.zhongan.icare.message.push.service.impl;

import com.google.common.base.Preconditions;
import com.zhongan.health.common.persistence.CommonFieldUtils;
import com.zhongan.health.common.persistence.SequenceFactory;
import com.zhongan.health.common.utils.BeanUtils;
import com.zhongan.icare.message.push.dao.PushTemplateDAO;
import com.zhongan.icare.message.push.dao.dataobject.PushTemplateDO;
import com.zhongan.icare.message.push.service.IPushTemplateService;
import com.zhongan.icare.share.message.dto.PushTemplateDTO;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.util.List;

@Service
@RestController
class PushTemplateServiceImpl implements IPushTemplateService {
    @Resource
    PushTemplateDAO dao;

    public long insert(@RequestBody PushTemplateDTO dto) {
        Preconditions.checkArgument(dto != null,"dto不能为空.");
        PushTemplateDO dataobject= BeanUtils.simpleDOAndBOConvert(dto,PushTemplateDO.class);
        Long id=dataobject.getId();
        if(id==null)
        {
            id= SequenceFactory.nextId(PushTemplateDO.class);
            dataobject.setId(id);
        }
        CommonFieldUtils.populate(dataobject, true);
        dao.insert(dataobject);
        return id;
    }

    public long insertSelective(@RequestBody PushTemplateDTO dto) {
        Preconditions.checkArgument(dto != null,"dto不能为空.");
        PushTemplateDO dataobject= BeanUtils.simpleDOAndBOConvert(dto,PushTemplateDO.class);
        Long id=dataobject.getId();
        if(id==null)
        {
            id= SequenceFactory.nextId(PushTemplateDO.class);
            dataobject.setId(id);
        }
        CommonFieldUtils.populate(dataobject, true);
        dao.insertSelective(dataobject);
        return id;
    }

    public int updateByPrimaryKey(@RequestBody PushTemplateDTO dto) {
        Preconditions.checkArgument(dto != null&&dto.getId()!=null,"Id不能为空.");
        PushTemplateDO dataobject= BeanUtils.simpleDOAndBOConvert(dto,PushTemplateDO.class);
        CommonFieldUtils.populate(dataobject, false);
        int cnt = dao.updateByPrimaryKey(dataobject);
        return cnt;
    }

    public int deleteByPrimaryKey(@RequestParam("id") long id) {
        Preconditions.checkArgument(id>0,"Id必须大于0");
        int cnt = dao.deleteByPrimaryKey(id);
        return cnt;
    }

    public int updateByPrimaryKeySelective(@RequestBody PushTemplateDTO dto) {
        Preconditions.checkArgument(dto != null&&dto.getId()!=null,"Id不能为空.");
        PushTemplateDO dataobject= BeanUtils.simpleDOAndBOConvert(dto,PushTemplateDO.class);
        CommonFieldUtils.populate(dataobject, false);
        int cnt = dao.updateByPrimaryKeySelective(dataobject);
        return cnt;
    }

    public List<PushTemplateDTO> selectByCond(@RequestBody PushTemplateDTO dto) {
        Preconditions.checkArgument(dto != null,"查询条件不能为空.");
        PushTemplateDO dataobject= BeanUtils.simpleDOAndBOConvert(dto,PushTemplateDO.class);
        List<PushTemplateDO> dataobjects =  dao.selectByCond(dataobject);
        return BeanUtils.simpleDOAndBOConvert(dataobjects, PushTemplateDTO.class,null);
    }

    public int countByCond(@RequestBody PushTemplateDTO dto) {
        Preconditions.checkArgument(dto != null,"查询条件不能为空.");
        PushTemplateDO dataobject= BeanUtils.simpleDOAndBOConvert(dto,PushTemplateDO.class);
        int cnt = dao.countByCond(dataobject);
        return cnt;
    }

    public PushTemplateDTO selectByPrimaryKey(@RequestParam("id") long id) {
        Preconditions.checkArgument(id >0,"id必须大于0");
        PushTemplateDO dataobject =  dao.selectByPrimaryKey(id);
        return BeanUtils.simpleDOAndBOConvert(dataobject, PushTemplateDTO.class);
    }
}