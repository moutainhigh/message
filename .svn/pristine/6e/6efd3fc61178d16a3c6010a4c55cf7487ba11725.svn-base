package com.zhongan.icare.message.push.mq.handler;

import com.alibaba.fastjson.JSONObject;
import com.zhongan.health.common.utils.security.digest.MD5Utils;
import com.zhongan.icare.share.message.dto.PushRequestDataDTO;
import com.zhongan.icare.share.message.dto.PushRequestLogDTO;
import com.zhongan.icare.share.message.dto.PushRequestLogMultiDTO;
import com.zhongan.icare.share.message.dto.PushTemplateDTO;
import com.zhongan.icare.share.message.enm.MessageEventType;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Map;

@Slf4j
public class Message2MultiProcesser extends MessageCommonProcesser<Long>
{

    @Override
    public String name()
    {
        return MessageEventType.MSG_2_MULTI.getCode();
    }

        @Override
    protected String caclKey(Long id, String... keys)
    {
        try
        {
            return MD5Utils.digestAsBase64(commonKey(keys) + id );
        } catch (Exception e)
        {
            log.error("", e);
            return null;
        }
    }

//    /**
//     * 计算
//     *
//     * @param pushRequestLogDTO
//     * @return
//     */
//    @Override
//    protected String caclKey(PushRequestLogMultiDTO pushRequestLogDTO, String... keys)
//    {
//        StringBuilder ids = new StringBuilder("");
//        for (long id : pushRequestLogDTO.getCustomerIds())
//        {
//            ids.append(id);
//        }
//        try
//        {
//            return MD5Utils.digestAsBase64(commonKey(keys) + ids + commonKey(pushRequestLogDTO));
//        } catch (Exception e)
//        {
//            log.error("", e);
//            return null;
//        }
//    }

    @Override
    public void process(Long id)
    {
        // 查询消息
        PushRequestDataDTO pushRequestDataDTO= queryRequestData(id);
        if(pushRequestDataDTO == null) return;
        log.info(">>>>>>开始消费Message2MultiProcesser.process,id={}",id);
        PushRequestLogMultiDTO requestLogDTO = JSONObject.parseObject(pushRequestDataDTO.getData(),PushRequestLogMultiDTO.class);

        // 首先做消息的解析
        PushTemplateDTO pushTemplateDTO = loadPushTemplateDTO(requestLogDTO);
        if (pushTemplateDTO == null)
            return;
        Map<String, Object> contextMap = requestLogDTO.getDataMap();
        // 组装发送数据
        List<PushRequestLogDTO> requestLogDtoList = initMultiLogDTO(requestLogDTO, pushTemplateDTO, contextMap);

        // 保存并且发送推送信息
        for (PushRequestLogDTO newRequestLogDTO : requestLogDtoList)
        {
            newRequestLogDTO.setMessageType(requestLogDTO.getMessageType());
            insertAndSendMessage(newRequestLogDTO, contextMap);
        }
    }

    @Override
    public boolean match(String tag, String topic, String bizKey)
    {
        log.info("recieve kafka message tag : {}", tag);
        return MessageEventType.MSG_2_MULTI.getCode().equals(tag);
    }

    @Override
    public void process(String tag, String bizKey, Long id)
    {
        // 首先检查是否是重复消费
        String key = caclKey(id, bizKey);
        if (isRepeatConsume(key))
        {
            log.warn("批量推送的重复消费，id:{},bizKey:{},key:{}", id, bizKey, key);
            return;
        }
        process(id);
    }

}
